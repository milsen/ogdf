name: Check, Build and Test

on:
  pull_request:
  push:

# # Debug setup:
# env:
#   OGDF_UTILS_PREQUEL: "set -x"
#   CCACHE_DEBUG: 1
#   CCACHE_DEBUGDIR: ${{ github.workspace }}/ccache-debug
#   VERBOSE: 1

jobs:
  # We don't want to run the CI twice for PRs from branches within the repo, so for a push event we only run the CI
  # if it happened in a fork was to the master branch, while running the CI for all (in-repo and cross-repo) PRs.
  # Workflows skipped due to filters block PRs from being merged (their required jobs count as "pending"),
  # while jobs skipped due to conditions still count as success, so we apply the filter here.
  precheck:
    name: "Check whether to run the CI"
    runs-on: ubuntu-latest
    if: github.event.repository.full_name != 'ogdf/ogdf' || github.event_name != 'push' || github.event.ref == 'refs/heads/master'
    steps:
      - run: echo "Running CI pipeline!"

  style:
    needs: [ precheck ]
    name: "Check code style"
    runs-on: ubuntu-latest
    container: docker.io/ogdf/clang:15
    steps:
      - name: "Add workspace as a safe directory in containers"
        run: git config --system --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v4
      - name: Run style checks
        run: util/style/test_all.sh
      - name: Generate patch with style fixes upon failure
        run: |
          echo "Please download the artifact and apply style-fixes.patch to fix code style problems."
          util/style/test_all.sh -f
          git diff > style-fixes.patch
          git status
        if: failure()
      - name: Store patch with style fixes
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: style-fixes
          path: style-fixes.patch

  dirs:
    needs: [ precheck ]
    name: "Check directory structure"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Test directory structure
        run: util/test_directory_structure.sh

  docs:
    needs: [ precheck ]
    name: "Check Doxygen"
    runs-on: ubuntu-latest
    container: docker.io/ogdf/clang:15
    steps:
      - uses: actions/checkout@v4
      - run: util/test_doxygen.sh

  self-sufficiency:
    needs: [ precheck ]
    name: "Test self-sufficiency"
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -v"
    steps:
      - uses: actions/checkout@v4
      - name: Set-up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}
      - name: Test self-sufficiency
        run: |
          # the script calls gcc directly, so ensure that it finds the ccache version instead
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          util/test_self-sufficiency.sh
      - uses: actions/upload-artifact@v4
        name: Upload ccache debug info
        if: ${{ env.CCACHE_DEBUG == 1 }}
        with:
          name: ${{ github.job }}
          path: ${{ github.workspace }}/ccache-debug

  build-macos:
    name: "Test ${{ matrix.mode }} build on ${{ matrix.os }}"
    strategy:
      matrix: # when updating macos versions, also update the prune-caches job
        mode: [ debug, release ]
        os: [ macos-13 ] # latest/14 is with M1, while macos-13 is intel
    runs-on: ${{ matrix.os }}
    needs: [ style, dirs, self-sufficiency, docs ]
    steps:
      - uses: actions/checkout@v4
      - run: brew install coreutils findutils
      - name: Set-up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-${{ matrix.os }}-${{ matrix.mode }}
      - name: Check CPU model
        run: |
          uname -av
          sysctl machdep.cpu
          system_profiler system_profiler SPSoftwareDataType SPHardwareDataType
      - name: Test ${{ matrix.mode }} build and run
        run: |
          util/test_build_and_run.sh \
            static \
            ${{ matrix.mode }} \
            default_c \
            default_s \
            -DOGDF_USE_ASSERT_EXCEPTIONS=ON -DOGDF_ARCH=ivybridge \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        # ivybridge is the oldest arch we encountered from SIGILL ccaching problems
      - uses: actions/upload-artifact@v4
        name: Upload ccache debug info
        if: ${{ env.CCACHE_DEBUG == 1 }}
        with:
          name: build-${{ matrix.os }}-${{ matrix.mode }}
          path: ${{ github.workspace }}/ccache-debug


  # this is mostly used to keep the required status checks for PR merging simple
  summary:
    needs: [ build-macos ]
    name: "All tests succeeded"
    runs-on: ubuntu-latest
    steps:
      - run: echo "Everything worked!"
