name: Check, Build and Test

on:
  pull_request:
  push:

# # Debug setup:
# env:
#   OGDF_UTILS_PREQUEL: "set -x"
#   CCACHE_DEBUG: 1
#   CCACHE_DEBUGDIR: ${{ github.workspace }}/ccache-debug
#   VERBOSE: 1

jobs:
  # We don't want to run the CI twice for PRs from branches within the repo, so for a push event we only run the CI if
  # the push was to the master branch or to a fork of the repo, while running the CI for all (in- and cross-repo) PRs.
  # Workflows skipped due to filters block PRs from being merged (their required jobs count as "pending"),
  # while jobs skipped due to conditions still count as success, so we apply the filter here.
  precheck:
    name: "Check whether to run the CI"
    runs-on: ubuntu-latest
    if: github.event.repository.full_name != 'ogdf/ogdf' || github.event_name != 'push' || github.event.ref == 'refs/heads/master'
    steps:
      - run: echo "Running CI pipeline!"

  coverage:
    name: "Analyze Test Coverage"
    runs-on: ubuntu-latest
    container: docker.io/ogdf/clang:18
    needs: [ precheck ]
    env:
      CCACHE_COMPILERCHECK: "%compiler% -v"
    steps:
      - name: "Add workspace as a safe directory in containers"
        run: git config --system --add safe.directory $GITHUB_WORKSPACE
      - uses: actions/checkout@v4
      - name: Set-up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.job }}
      - name: Run analysis
        run: |
          util/test_coverage.sh -DOGDF_ARCH=haswell -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        shell: bash
      - name: Store coverage data
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage
          path: coverage/
      - uses: actions/upload-artifact@v4
        name: Upload ccache debug info
        if: ${{ env.CCACHE_DEBUG == 1 }}
        with:
          name: ${{ github.job }}
          path: ${{ github.workspace }}/ccache-debug


  # this is mostly used to keep the required status checks for PR merging simple
  summary:
    needs: [ coverage ]
    name: "All tests succeeded"
    runs-on: ubuntu-latest
    steps:
      - run: echo "Everything worked!"
